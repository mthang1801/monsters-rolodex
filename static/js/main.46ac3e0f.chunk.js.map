{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","console","log","monsters","map","key","SearchBox","type","placeholder","onChange","handleChange","App","e","target","value","setState","state","searchFilter","fetch","then","res","json","users","catch","err","this","filterMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2VAEaA,G,YAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,6BACR,4BAAKJ,EAAMG,QAAQE,MACnB,2BAAIL,EAAMG,QAAQG,UCOTC,EAXE,SAACP,GAEhB,OADAQ,QAAQC,IAAIT,GAEV,yBAAKC,UAAU,aACZD,EAAMU,SAASC,KAAI,SAAAR,GAAO,OACzB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,SCN3BU,G,MAAY,SAACb,GACxB,OACE,6BACE,2BACEC,UAAU,aACVa,KAAK,SACLT,KAAML,EAAMK,KACZU,YAAaf,EAAMe,YACnBC,SAAUhB,EAAMiB,kBCmCTC,G,wDAvCb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAcRiB,aAAe,SAACE,GACdX,QAAQC,IAAR,gBADoB,MAEEU,EAAEC,OAFJ,EAEdf,KAFc,EAERgB,MACZ,EAAKC,SAAL,eAAiBH,EAAEC,OAAOf,KAAOc,EAAEC,OAAOC,SAhB1C,EAAKE,MAAQ,CACXb,SAAU,GACVc,aAAc,IAJC,E,gEAQE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKP,SAAS,CAAEZ,SAAUmB,OAC1CC,OAAM,SAACC,GAAD,OAASvB,QAAQC,IAAIsB,Q,+BAQtB,IAAD,EAC4BC,KAAKT,MAAhCb,EADD,EACCA,SAAUc,EADX,EACWA,aACZS,EAAiBvB,EAASwB,QAAO,SAAC/B,GAAD,OACrCA,EAAQE,KAAK8B,cAAcC,SAASZ,EAAaW,kBAEnD,OACE,yBAAKlC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEI,KAAK,eACLU,YAAY,kBACZE,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUP,SAAUuB,S,GAlCVI,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.46ac3e0f.chunk.js","sourcesContent":["import React from 'react'\nimport \"./card.style.css\";\nexport const Card = (props) => {\n  return (\n    <div className=\"card\">\n      <img src={`https://robohash.org/${props.monster.id}/?set=set2&size=180x180`}/>\n      <h3>{props.monster.name}</h3>   \n      <p>{props.monster.email}</p>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport \"./card-list.style.css\";\nimport {Card} from \"../card/card\";\nconst CardList = (props) => {\n  console.log(props);\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\nimport \"./search-box.style.css\";\nexport const SearchBox = (props) => {\n  return (\n    <div >\n      <input\n        className=\"search-box\"\n        type=\"search\"\n        name={props.name}        \n        placeholder={props.placeholder}\n        onChange={props.handleChange}\n      />\n    </div>\n   \n  )\n}\n\n","import React from \"react\";\nimport CardList from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search-box/search-box\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchFilter: \"\",\n    };\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch((err) => console.log(err));\n  }\n\n  handleChange = (e) => {\n    console.log(this);\n    let { name, value } = e.target;\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  render() {\n    const { monsters, searchFilter } = this.state;\n    const filterMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchFilter.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolotex</h1>\n        <SearchBox\n          name=\"searchFilter\"\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}